var BK=BK||{};BK.Ajax=function(config){var vars="",self=this;if(self.request=window.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP"),self.request.onreadystatechange=function(){if(4==self.request.readyState&&200==self.request.status){var ctype=self.request.getResponseHeader("Content-Type"),response;if(ctype.match(/xml/gi)?response=self.request.responseXML:ctype.match(/json/gi)?(eval("var qqq="+self.request.responseText),response=qqq):response=self.request.responseText,config.onComplete){var headers=BK.Ajax.convertHeadersToObject(self.request.getAllResponseHeaders());config.onComplete(response,headers)}}else 4==self.request.readyState&&200!=self.request.status&&config.onFailure&&config.onFailure({text:self.request.responseText,code:self.request.status})},config.params)if(config.params.substr)vars=config.params;else{for(param in config.params)vars+="&"+encodeURIComponent(param)+"="+encodeURIComponent(config.params[param]);vars=vars.substr(1)}self.fire=function(){if("GET"==config.method){vars&&(vars="?"+vars),self.request.open("GET",config.url+vars,!0);for(header in config.headers)self.request.setRequestHeader(header,config.headers[header]);config.xRequestedWith&&self.request.setRequestHeader("X-Requested-With","XMLHttpRequest"),self.request.send(null)}else{self.request.open("POST",config.url,!0);for(header in config.headers)self.request.setRequestHeader(header,config.headers[header]);config.xRequestedWith&&self.request.setRequestHeader("X-Requested-With","XMLHttpRequest"),self.request.setRequestHeader("Content-type","application/x-www-form-urlencoded"),self.request.send(vars)}return self},self.abort=function(){self.request.onreadystatechange=null,self.request.abort(),config.onFailure&&config.onFailure({text:self.request.responseText,code:self.request.status})}},BK.Ajax.convertHeadersToObject=function(e){for(var s=e.split("\n"),t={},r=0;r<s.length;r++){var n=s[r].split(": ",2);n.length>1&&(t[n[0]]=n[1])}return t};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
